Implement endpoints for:
	User:
		Register new user.		POST <
		Change username.		PUT ????
		Change pw.			PUT <
		Read user info MINUS PW/MAIL	GET <
		Change username.		PUT <
		Change pw.			PUT <
		Read all accounts of a user. 	GET <
		Read all teams of a user.	GET <	TODO DELETE POJOS AND REMAKE INTO MAPS
		Delete account.			DELETE <
	RegionalAccount:
		Add/Change entity		POST <
		Read all user accounts.		GET  <
		Delete entity.			DELETE <
	Team:
		Create new team.		POST <
		Change team name.		PUT <
		Add user to team.		PUT <
		Remove user from team.		DELETE <
		Read all teams.			GET <
		Read specific team.		GET <
	Tournament:
		Create new tournament.		POST <
		Delete tournament.		DELETE <
		Change tournament name.		PUT <
		Set Victor.			PUT <
		Change tournament region.	PUT <
		Read all tournaments.		GET <
		Get all teams of a tournament	GET <
		Read specific tournament.	GET <
	TournamentTeams: //this one has been reworked into TournamentController
		Add a new team.			POST <
		Remove a team.			DELETE <
		Modify position			PUT X
		Modify eliminationRound		PUT <
ADD NEEDED FIELDS TO DB:
	ADD rank FIELD TO REGION ACCOUNT <
ADD UNIQUE CONSTRAINTS TO DB:
	site_user username must be unique <
	site_user email must be unique <
	team team_name must be unque <
	tournament name_tournament must be unique <
REMAKE REGIONAL ACCOUNT TO REFLECT DB:
	ADD RANK SHORT FIELD <
ADD DB-EXCEPTION HANDLING TO BACKEND:
	SITEUSERCONTROLLER <
	REGIONALACCOUNTCONTROLLER <
	TEAMCONTROLLER <
	TOURNAMEN T<
ADD HTTP RESPONSE CODES HANDLING TO BACKEND: <
REMAKE BACKEND WITH OPTIONALS: <



FILL DATABASE WITH 2 TEAM'S WORTH OF RANK DATA: <
	

WRITE SEEDING ALGO:
	CREATE CLASS TEAMSKILLDTO FOR TRANSFERRING SKILL DATA <
	takes as an argument: REGION (of the tournament) <
		could be a method of Tournament??? x
		WRITE AN ALGO CALCULATES A TEAM'S SKILL SCORE BASED ON THEIR MEMBERS AND RETURNS A MAP OBJECT OF TeamSkillDto (team with an extra field) <
	PUT IT INTO A LIST<TeamSkillDto> <
	Write an algo that orders that list based on the skill level <
	it returns that list<
	make updating ranks thru riot api optional
	write algo that takes only tournament and seeds it <

	CREATE REST CONTROLLER FOR SEEDING <
	

WRITE RIOT API STUFF:
	
	research all lol ranks: <
		make an enum to represent them, avoid magic constants <

	research how to make the queries <

	research how to make many fast async http calls<
		X likely will need spring @Async and make it update a tournament's DB part with a "currently being updated" boolean to true to avoid tournaments starting while its being updated

	update DB tournament field with "currently_updating" boolean that the rank updating method will set and unset to make sure that we keep consistency <

	update spring entity to represent the db changes <

	create a method to construct the api URL <

	create Async method that updates all regionalAccounts relevant to a tournament: <
		it sets "currently_updating" to true at the start <
		gets all relevant RegionalAccounts <
		gets all encrypted ids relevant to the user names and puts them into a list: List<IdDeserializer> (???) <
		uses all encrypted ids to fetch the highest ranks of every RegionalAccount and updates it through the Enum
			gets a list of lists as in : List<List<RankDeserializer>> <
			for each inner list selects only the highest rank and uses that to save <
		saves them all down <
		it sets "currently_updating" to false at the end <

	
	 X write a simple crontab to update the api key every 12 hours and have it run on the RBerry Pi XX//likely nope, i will need a new api key every day. That or a personal key.

	add something to track and prevent timeouts	<
	make it actually async <
	handle null values <

MAKE ALL TOURNAMENT METHODS AWARE OF "currently updating":
	tournamentController etc.

ADD A LISTENER THAT WOULD SEND E-MAILS 1 DAY AND 1 HOUR BEFORE A TOURNAMENT:
	#TODO#

CONSIDER ADDING IMAGES:
	!!!!REVERSE PROXIY STUFF???!!!!!
	GET 16 (maybe 24) FREE PG IMAGES THAT TEAMS CAN USE TO REPRESENT THEMSELVES
	HOST THEM ON SOME FREE SITE
	GIVE THE DB A NEW TABLE "image" THAT CONTAINS: image_id and image_url
	extra fields to "team" table: image_id

ADD SPRING BOOT SECURITY TO THE PROJECT / ADD OATH 2:
	#TODO
	
CREATE FRONTEND:
	WATCH REACT TUTORIALS
	#TODO
